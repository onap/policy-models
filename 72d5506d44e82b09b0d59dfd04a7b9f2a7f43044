{
  "comments": [
    {
      "key": {
        "uuid": "ae3deec1_e26c4822",
        "filename": "models-provider/src/test/java/org/onap/policy/models/provider/impl/DatabasePolicyModelsProviderTest.java",
        "patchSetId": 2
      },
      "lineNbr": 312,
      "author": {
        "id": 811
      },
      "writtenOn": "2019-03-27T18:15:11Z",
      "side": 1,
      "message": "suggestion: use assertj\u0027s assertThatThrownBy() and turn all of these into 1-2 liners.\n\nsame comment applies to a few other files",
      "revId": "72d5506d44e82b09b0d59dfd04a7b9f2a7f43044",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93022518_b96e58a1",
        "filename": "models-provider/src/test/java/org/onap/policy/models/provider/impl/PolicyLegacyGuardPersistenceTest.java",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 811
      },
      "writtenOn": "2019-03-27T18:15:11Z",
      "side": 1,
      "message": "suggestion: consider using StandardCoder, as it hides gson, and it will ensure this can be encoded/decoded using the standard coder, whatever that happens to be.\n\nsame comment in a few other files",
      "revId": "72d5506d44e82b09b0d59dfd04a7b9f2a7f43044",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ecfa07ea_9b0cf2d8",
        "filename": "models-tosca/src/main/java/org/onap/policy/models/tosca/legacy/concepts/LegacyGuardPolicyContent.java",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 811
      },
      "writtenOn": "2019-03-27T18:15:11Z",
      "side": 1,
      "message": "\"rpoperty\" \u003d\u003e \"property\"",
      "revId": "72d5506d44e82b09b0d59dfd04a7b9f2a7f43044",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55175def_e9a60c74",
        "filename": "models-tosca/src/main/java/org/onap/policy/models/tosca/legacy/concepts/LegacyGuardPolicyInput.java",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1441
      },
      "writtenOn": "2019-03-27T17:55:09Z",
      "side": 1,
      "message": "do we need version in input? should client specify a version or system auto-generate one?",
      "range": {
        "startLine": 40,
        "startChar": 19,
        "endLine": 40,
        "endChar": 32
      },
      "revId": "72d5506d44e82b09b0d59dfd04a7b9f2a7f43044",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "882a4317_f779f784",
        "filename": "models-tosca/src/main/java/org/onap/policy/models/tosca/legacy/concepts/LegacyGuardPolicyInput.java",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 2787
      },
      "writtenOn": "2019-03-27T20:10:28Z",
      "side": 1,
      "message": "It\u0027s optional so if its not specified it\u0027s not specified.",
      "parentUuid": "55175def_e9a60c74",
      "range": {
        "startLine": 40,
        "startChar": 19,
        "endLine": 40,
        "endChar": 32
      },
      "revId": "72d5506d44e82b09b0d59dfd04a7b9f2a7f43044",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a73049e_2a612157",
        "filename": "models-tosca/src/main/java/org/onap/policy/models/tosca/legacy/concepts/LegacyGuardPolicyInput.java",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1441
      },
      "writtenOn": "2019-03-27T17:55:09Z",
      "side": 1,
      "message": "I\u0027d prefer to have content as general Map\u003cString, String\u003e since the fields in the contents are not specific to frequency and minmax guard. If we have new types of guard policy that require new content fields, we don\u0027t need to change LegacyGuardPolicyContent class.",
      "range": {
        "startLine": 42,
        "startChar": 12,
        "endLine": 42,
        "endChar": 36
      },
      "revId": "72d5506d44e82b09b0d59dfd04a7b9f2a7f43044",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05fa3191_a9d5c280",
        "filename": "models-tosca/src/main/java/org/onap/policy/models/tosca/legacy/concepts/LegacyGuardPolicyInput.java",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 2787
      },
      "writtenOn": "2019-03-27T20:10:28Z",
      "side": 1,
      "message": "I did it this way to make the parsing easier. If we don\u0027t do it this way then we\u0027ll have to have a custom parser. We\u0027re deprecating all this stuff anyway in El Alto so in my opinion this is the easiest way.",
      "parentUuid": "2a73049e_2a612157",
      "range": {
        "startLine": 42,
        "startChar": 12,
        "endLine": 42,
        "endChar": 36
      },
      "revId": "72d5506d44e82b09b0d59dfd04a7b9f2a7f43044",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ffc9bff_4efdecd1",
        "filename": "models-tosca/src/main/java/org/onap/policy/models/tosca/legacy/concepts/LegacyGuardPolicyOutput.java",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1441
      },
      "writtenOn": "2019-03-27T17:55:09Z",
      "side": 1,
      "message": "a bit confused. legacy policy output would be in tosca form or legacy custom form? In models-examples, we have both tosca and non-tosca versions of legacy output.",
      "range": {
        "startLine": 33,
        "startChar": 13,
        "endLine": 33,
        "endChar": 36
      },
      "revId": "72d5506d44e82b09b0d59dfd04a7b9f2a7f43044",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e018012d_415f464e",
        "filename": "models-tosca/src/main/java/org/onap/policy/models/tosca/legacy/concepts/LegacyGuardPolicyOutput.java",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 2787
      },
      "writtenOn": "2019-03-27T20:10:28Z",
      "side": 1,
      "message": "If you give legacy input, then you get legacy output.",
      "parentUuid": "0ffc9bff_4efdecd1",
      "range": {
        "startLine": 33,
        "startChar": 13,
        "endLine": 33,
        "endChar": 36
      },
      "revId": "72d5506d44e82b09b0d59dfd04a7b9f2a7f43044",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8201bcd9_d86b1747",
        "filename": "models-tosca/src/main/java/org/onap/policy/models/tosca/legacy/concepts/LegacyGuardPolicyOutput.java",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1441
      },
      "writtenOn": "2019-03-27T17:55:09Z",
      "side": 1,
      "message": "do we really need to have Map here? perhaps better to just put fields like \"actor\", \"recipe\" under \"properties\"? That is, no need of \"content\" in the middle.",
      "range": {
        "startLine": 37,
        "startChar": 12,
        "endLine": 37,
        "endChar": 22
      },
      "revId": "72d5506d44e82b09b0d59dfd04a7b9f2a7f43044",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fd0315c_7233e931",
        "filename": "models-tosca/src/main/java/org/onap/policy/models/tosca/legacy/concepts/LegacyGuardPolicyOutput.java",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1441
      },
      "writtenOn": "2019-03-27T17:55:09Z",
      "side": 1,
      "message": "same. better to just use Map\u003cString, String\u003e?",
      "range": {
        "startLine": 37,
        "startChar": 24,
        "endLine": 37,
        "endChar": 48
      },
      "revId": "72d5506d44e82b09b0d59dfd04a7b9f2a7f43044",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a894f5d_2f765943",
        "filename": "models-tosca/src/main/java/org/onap/policy/models/tosca/legacy/concepts/LegacyGuardPolicyOutput.java",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 2787
      },
      "writtenOn": "2019-03-27T20:10:28Z",
      "side": 1,
      "message": "Yes if we don\u0027t want a custom serializer. I investigated this for an hour or two today including reverse engineering the solution in GSON in the debugger and this was the only way I could see of getting the desired output.",
      "parentUuid": "8201bcd9_d86b1747",
      "range": {
        "startLine": 37,
        "startChar": 12,
        "endLine": 37,
        "endChar": 22
      },
      "revId": "72d5506d44e82b09b0d59dfd04a7b9f2a7f43044",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fee63a8_3fec5c58",
        "filename": "models-tosca/src/main/java/org/onap/policy/models/tosca/legacy/mapping/LegacyGuardPolicyMapper.java",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 811
      },
      "writtenOn": "2019-03-27T18:15:11Z",
      "side": 1,
      "message": "suggestion: use policy/commons @Property annotation within LegacyGuardPolicyContent, then you can use policy/commons BeanConfigurator to set all of the properties.  That will eliminate all of these lines.",
      "revId": "72d5506d44e82b09b0d59dfd04a7b9f2a7f43044",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}