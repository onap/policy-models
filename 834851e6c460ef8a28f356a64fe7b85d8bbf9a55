{
  "comments": [
    {
      "key": {
        "uuid": "88cdce7f_1fb5c6dd",
        "filename": "models-pap/src/main/java/org/onap/policy/models/pap/concepts/PdpGroup.java",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 3239
      },
      "writtenOn": "2019-03-22T10:45:28Z",
      "side": 1,
      "message": "We can use lombok to do this.\nFor no args constructor:\n@NoArgsConstructor\n\nFor copy constructor:\n@Builder(toBuilder \u003d true)\nclass Foo {\n    // fields, etc\n}\nFoo foo \u003d getReferenceToFooInstance();\nFoo copy \u003d foo.toBuilder().build();",
      "range": {
        "startLine": 51,
        "startChar": 3,
        "endLine": 70,
        "endChar": 5
      },
      "revId": "834851e6c460ef8a28f356a64fe7b85d8bbf9a55",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ecfb7d6_984cbbd6",
        "filename": "models-pap/src/main/java/org/onap/policy/models/pap/concepts/PdpGroup.java",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 811
      },
      "writtenOn": "2019-03-22T12:32:28Z",
      "side": 1,
      "message": "I\u0027m not sure I see how @Builder helps, as we want to make a deep copy of all of the elements, using their respective copy constructors.",
      "parentUuid": "88cdce7f_1fb5c6dd",
      "range": {
        "startLine": 51,
        "startChar": 3,
        "endLine": 70,
        "endChar": 5
      },
      "revId": "834851e6c460ef8a28f356a64fe7b85d8bbf9a55",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f70cbfe_fb5fab2b",
        "filename": "models-pap/src/main/java/org/onap/policy/models/pap/concepts/PdpInstanceDetails.java",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 3239
      },
      "writtenOn": "2019-03-22T10:45:28Z",
      "side": 1,
      "message": "Same comment",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 63,
        "endChar": 5
      },
      "revId": "834851e6c460ef8a28f356a64fe7b85d8bbf9a55",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a72d9e0_f191e5e8",
        "filename": "models-pap/src/main/java/org/onap/policy/models/pap/concepts/PdpSubGroup.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 3239
      },
      "writtenOn": "2019-03-22T10:45:28Z",
      "side": 1,
      "message": "Same comment.",
      "range": {
        "startLine": 53,
        "startChar": 3,
        "endLine": 73,
        "endChar": 5
      },
      "revId": "834851e6c460ef8a28f356a64fe7b85d8bbf9a55",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca57a1bd_a9342e1a",
        "filename": "models-pap/src/main/java/org/onap/policy/models/pap/concepts/Policy.java",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 3239
      },
      "writtenOn": "2019-03-22T10:45:28Z",
      "side": 1,
      "message": "We don\u0027t need this class as we will be using ToscaPolicy.",
      "range": {
        "startLine": 37,
        "startChar": 13,
        "endLine": 37,
        "endChar": 19
      },
      "revId": "834851e6c460ef8a28f356a64fe7b85d8bbf9a55",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe4e406d_25389cca",
        "filename": "models-pap/src/main/java/org/onap/policy/models/pap/concepts/Policy.java",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 811
      },
      "writtenOn": "2019-03-22T12:52:53Z",
      "side": 1,
      "message": "Actually, I\u0027m beginning to think that we want to go in the opposite direction, introducing several different \"Policy\" classes.  My concern is that, in different contexts, we\u0027re supposed to be populating different fields.  Using the same class for each is confusing.\n\nFor instance, instance in the query, we return supported types, which is just the type \u0026 version, AND we return policies, which are name, type, type version, and implementation. In the deploy, it\u0027s just the policy name \u0026 version.  In the PDP_STATUS message, we have the supported types, which is the same as the query, I believe, but we also have a list of policies, which is the policy name, type, type version, and properties.  And finally, we have the PDP_UPDATE message, that has a list of policies that appear to have the same structure as the second list in the PDP_STATUS message.\n\nBased on the above, I see the need for four distinct classes, none of which seem to match the fields in ToscaPolicy: type/version, name/type/type-version/implementation, name/version, name/type/type-version/properties.",
      "parentUuid": "ca57a1bd_a9342e1a",
      "range": {
        "startLine": 37,
        "startChar": 13,
        "endLine": 37,
        "endChar": 19
      },
      "revId": "834851e6c460ef8a28f356a64fe7b85d8bbf9a55",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40aaa8dc_ebc3e587",
        "filename": "models-pap/src/main/java/org/onap/policy/models/pap/concepts/Policy.java",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 3239
      },
      "writtenOn": "2019-03-22T10:45:28Z",
      "side": 1,
      "message": "Same comment",
      "range": {
        "startLine": 45,
        "startChar": 4,
        "endLine": 63,
        "endChar": 5
      },
      "revId": "834851e6c460ef8a28f356a64fe7b85d8bbf9a55",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}