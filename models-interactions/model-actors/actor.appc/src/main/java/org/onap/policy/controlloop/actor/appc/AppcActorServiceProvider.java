/*-
 * ============LICENSE_START=======================================================
 * APPCActorServiceProvider
 * ================================================================================
 * Copyright (C) 2017-2019 AT&T Intellectual Property. All rights reserved.
 * Modifications Copyright (C) 2019 Nordix Foundation.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END=========================================================
 */

package org.onap.policy.controlloop.actor.appc;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;

import java.util.Collections;
import java.util.List;

import org.onap.policy.appc.CommonHeader;
import org.onap.policy.appc.Request;
import org.onap.policy.controlloop.ControlLoopOperation;
import org.onap.policy.controlloop.VirtualControlLoopEvent;
import org.onap.policy.controlloop.actorserviceprovider.spi.Actor;
import org.onap.policy.controlloop.policy.Policy;
import org.onap.policy.vnf.trafficgenerator.PgRequest;
import org.onap.policy.vnf.trafficgenerator.PgStream;
import org.onap.policy.vnf.trafficgenerator.PgStreams;


public class AppcActorServiceProvider implements Actor {
    // Strings for targets
    private static final String TARGET_VM = "VM";
    private static final String TARGET_VNF = "VNF";

    // Strings for recipes
    private static final String RECIPE_RESTART = "Restart";
    private static final String RECIPE_REBUILD = "Rebuild";
    private static final String RECIPE_MIGRATE = "Migrate";
    private static final String RECIPE_MODIFY = "ModifyConfig";

    private static final ImmutableList<String> recipes =
            ImmutableList.of(RECIPE_RESTART, RECIPE_REBUILD, RECIPE_MIGRATE, RECIPE_MODIFY);
    private static final ImmutableMap<String, List<String>> targets = new ImmutableMap.Builder<String, List<String>>()
            .put(RECIPE_RESTART, ImmutableList.of(TARGET_VM)).put(RECIPE_REBUILD, ImmutableList.of(TARGET_VM))
            .put(RECIPE_MIGRATE, ImmutableList.of(TARGET_VM)).put(RECIPE_MODIFY, ImmutableList.of(TARGET_VNF)).build();
    private static final ImmutableMap<String, List<String>> payloads = new ImmutableMap.Builder<String, List<String>>()
            .put(RECIPE_MODIFY, ImmutableList.of("generic-vnf.vnf-id")).build();

    @Override
    public String actor() {
        return "APPC";
    }

    @Override
    public List<String> recipes() {
        return ImmutableList.copyOf(recipes);
    }

    @Override
    public List<String> recipeTargets(String recipe) {
        return ImmutableList.copyOf(targets.getOrDefault(recipe, Collections.emptyList()));
    }

    @Override
    public List<String> recipePayloads(String recipe) {
        return ImmutableList.copyOf(payloads.getOrDefault(recipe, Collections.emptyList()));
    }

    /**
     * Constructs an APPC request conforming to the legacy API. The legacy API will be deprecated in
     * future releases as all legacy functionality is moved into the LCM API.
     *
     * @param onset the event that is reporting the alert for policy to perform an action
     * @param operation the control loop operation specifying the actor, operation, target, etc.
     * @param policy the policy the was specified from the yaml generated by CLAMP or through the
     *        Policy GUI/API
     * @return an APPC request conforming to the legacy API
     */
    public static Request constructRequest(VirtualControlLoopEvent onset, ControlLoopOperation operation, Policy policy,
            String targetVnf) {
        /*
         * Construct an APPC request
         */
        Request request = new Request();
        request.setCommonHeader(new CommonHeader());
        request.getCommonHeader().setRequestId(onset.getRequestId());
        request.getCommonHeader().setSubRequestId(operation.getSubRequestId());
        request.setAction(policy.getRecipe().substring(0, 1).toUpperCase() + policy.getRecipe().substring(1));

        /*
         * For now Policy generates the PG Streams as a demo, in the future the payload can be
         * provided by CLAMP
         */
        request.getPayload().put("generic-vnf.vnf-id", targetVnf);

        PgRequest pgRequest = new PgRequest();
        pgRequest.pgStreams = new PgStreams();

        PgStream pgStream;
        for (int i = 0; i < 5; i++) {
            pgStream = new PgStream();
            pgStream.streamId = "fw_udp" + (i + 1);
            pgStream.isEnabled = "true";
            pgRequest.pgStreams.pgStream.add(pgStream);
        }
        request.getPayload().put("pg-streams", pgRequest.pgStreams);

        /*
         * Return the request
         */

        return request;
    }


}
