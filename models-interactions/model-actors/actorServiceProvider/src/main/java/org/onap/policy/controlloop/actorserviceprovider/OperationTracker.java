/*-
 * ============LICENSE_START=======================================================
 * ONAP
 * ================================================================================
 * Copyright (C) 2020 AT&T Intellectual Property. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END=========================================================
 */

package org.onap.policy.controlloop.actorserviceprovider;

import java.util.concurrent.CompletableFuture;
import lombok.NoArgsConstructor;

/**
 * Tracker, used by operations to determine if they should continue to run. In particular,
 * this is used to propagate a cancellation (or other completion event) down a
 * CompletableFuture pipeline. Note: {@link #setFinalFuture(CompletableFuture)} must be
 * invoked for that functionality to work. If it is not, then {@link #isRunning()} will
 * always return {@code true}.
 */
@NoArgsConstructor
public class OperationTracker {

    /**
     * The final future in the pipeline.
     */
    private CompletableFuture<?> finalFuture;


    /**
     * Sets the final "future" in the pipeline. Note: this may be invoked multiple times
     * as new operations are added to the pipeline.
     *
     * @param <T> future's result type
     * @param finalFuture new, final "future"
     * @return the new, final "future"
     */
    public <T> CompletableFuture<T> setFinalFuture(CompletableFuture<T> finalFuture) {
        this.finalFuture = finalFuture;
        return finalFuture;
    }

    /**
     * Determines if the operation is still running (i.e., the final "future" in the
     * pipeline has not completed yet).
     *
     * @return {@code true} if the final "future" has not completed, {@code false}
     *         otherwise. Note: this always returns {@code true} if
     *         {@link #setFinalFuture(CompletableFuture)} has not been invoked yet
     */
    public boolean isRunning() {
        return (finalFuture == null || !finalFuture.isDone());
    }

    /**
     * Gets a future that will verify that the pipeline is still running. If the pipeline
     * is not running, then it returns an incomplete future, which will effectively halt
     * subsequent operations in the pipeline. This method is intended to be used with one
     * of the {@link CompletableFuture}'s <i>thenCompose()</i> methods. It is light weight
     * thus need not be executed asynchronously.
     *
     * @param <T> the future's result type
     * @param value value to be generated by the future
     * @return the given value, if the pipeline is still running, or an incomplete (i.e.,
     *         un-started) future otherwise
     */
    public <T> CompletableFuture<T> verifyRunning(T value) {
        return (isRunning() ? CompletableFuture.completedFuture(value) : new CompletableFuture<>());
    }
}
